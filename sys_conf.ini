

[conf]
; core/conf/tools/args_parse/others.rs
summary_file = records/record

; core/conf/tools/args_parse/receiver.rs
default_output_mod = csv

; core/conf/tools/args_parse/sender.rs
default_send_attempt_num = 10
default_source_ports = 30000-60000
default_probe_mod_v4 = icmp_v4
default_probe_mod_v6 = icmp_v6
default_batch_size = 100
default_must_sleep = 0
default_cool_time = 8


; core/conf/tools/args_parse/target_iterator.rs
default_ports = 0

; modules/output_modules/csv.rs
output_file_pattern_v4 = result/%Y_%m_%d__%H_%M_%S_v4.csv
output_file_pattern_v6 = result/%Y_%m_%d__%H_%M_%S_v6.csv
# 1M
default_output_buffer_capacity = 1048576


; receiver
active_check_count = 1000
capture_timeout = 10
# 128M  128 × 1024 × 1024
pcap_recv_buffer_size = 134217728

; sender
get_socket_attempts = 600
attempt_sleep_millis = 1000

; pid send_rate controller
kp = 0.8
ki = 0.02
ki_limit = 0.05
kd = 0.1


; tools/blocker/ipv4_blocker/
destination_black_list_v4 = block_list/destination_address/blacklist_v4.txt
destination_white_list_v4 = block_list/destination_address/whitelist_v4.txt

source_black_list_v4 = block_list/source_address/blacklist_v4.txt
source_white_list_v4 = block_list/source_address/whitelist_v4.txt


; tools/blocker/ipv6_blocker/
destination_black_list_v6 = block_list/destination_address/blacklist_v6.txt
destination_white_list_v6 = block_list/destination_address/whitelist_v6.txt

source_black_list_v6 = block_list/source_address/blacklist_v6.txt
source_white_list_v6 = block_list/source_address/whitelist_v6.txt

; modules/target_iterators/read_from_file/read_target_file.rs
fallback_bytes = 60
max_read_buf_bytes = 1048576

; probe modules
default_payload_file = probe_modules_payload/default_payload_file.txt

; pmap
pmap_default_ports = *
pmap_default_probe_mod_v4 = tcp_syn_scan_v4
pmap_default_probe_mod_v6 = tcp_syn_scan_v6
pmap_sampling_pro = 0.1
pmap_min_sample_num = 10
pmap_budget = 30
pmap_batch_num = 10
pmap_allow_graph_iter = false
pmap_use_hash_recorder = true
pmap_port_num_limit = 50



; topo(4/6)
# max_ttl <= 64
topo_max_ttl = 32
topo_dest_port = 33433
topo_payload = hello

; topo4
topo4_rand_bits = 0
topo4_default_probe_mod = topo_udp_v4

; topo6
topo6_rand_bits = 0
topo6_default_probe_mod = topo_udp_v6


; ipv6 space tree
default_code_probe_mod_v6 = code_icmp_v6
space_tree_type = den
batch_size = 100000
divide_range = 1-128
max_leaf_size = 16
no_allow_gen_seeds = true
no_allow_gen_seeds_from_file = false
region_extraction_num = 1000
seeds_num = 10000000

budget = 200000000
divide_dim = 4
learning_rate = 0.1

; ipv6 prefix tree
max_prefix_len = 64
min_prefix_len = 48
threshold = 0
extra_node_num = 10000
initial_ttl = 16
gap_limit = 3
prefix_tree_max_ttl = 32
min_target_num = 0
allow_leaf_expand = true
allow_layer_expand = true
layer_expand_ratio = 0.1
split_node_select_type = cascade
rand_ord = false
child_max_size = 16

allow_supplement_scan = false

; ipv6 aliased prefixes check
prefix_len = 64
prefix_count = 1000000
rand_addr_len = 16
alia_ratio = 0.8
output_alia_addrs = true
prefixes_len_per_batch = 1000000

[log]
; core/sys/logger.rs
# https://docs.rs/log4rs/*/log4rs/encode/pattern/index.html
log_pattern = {h({d(%Y-%m-%d %H:%M:%S %Z)(local)} {l} {m})}{n}
log_name_pattern = %Y_%m_%d__%H_%M_%S.log



[err]
; mode
recv_ready_receive_failed = 主线程无法获得接收线程的准备完成消息
send_thread_err = 执行发送线程时发生错误
send_recv_close_time_failed = 主线程向接收线程发送终止时间失败
recv_thread_err = 执行接收线程时发生错误


; sender
get_socket_failed = 发送线程获取套接字失败, 请确认是否以管理员权限启动
bind_failed = 发送线程绑定到指定网络接口失败
io_message_disabled = 无法启用io完成通知
sender_set_nonblock = 发送线程设置非阻塞模式失败

; sender windows
open_pcap_sender_failed = 启动pcap发包器失败, 请确认是否以管理员权限启动
create_send_queue_failed = 创建发送队列失败

; receiver
recv_ready_send_failed = 接收线程无法向主线程传递准备完成的消息
receiver_set_nonblock = 数据包捕获器设置非阻塞模式失败
open_capture_failed = 启动数据包捕获器失败, 请确认是否以管理员权限启动
data_link_type_not_supported = 当前网络接口的数据链路层类型不受支持, 当前类型为:
set_filter_failed = 为数据包捕获器设置过滤规则失败, 当前过滤规则为:

; core/sys/logger.rs
log_file_directory_both_exist = 不能同时指定日志文件和日志目录


; core/conf/tools/args_parse/ip/ipv4.rs
parse_ipv4_range_err = 解析ipv4地址范围失败, 注意范围左边界必须小于等于右边界, 且不能出现多个分隔符(-), 当前解析失败的目标范围:

; core/conf/tools/args_parse/ip/ipv6.rs
parse_ipv6_range_err = 解析ipv6地址范围失败, 注意范围左边界必须小于等于右边界, 且不能出现多个分隔符(-), 当前解析失败的目标范围:

; core/conf/tools/args_parse/ip/ipv6_binary_pattern.rs
parse_ipv6_binary_pattern_err = ipv6二进制模式字符串解析失败, 当前模式字符串为:

; core/conf/tools/args_parse/ip/ipv6_pattern.rs
parse_ipv6_pattern_err = ipv6模式字符串解析失败, 当前模式字符串为:
ipv6_pattern_local_part_err = ipv6模式字符串局部片段解析错误, 注意当前片段的首索引必须大于上一片段的尾索引, 且各项参数合法, 没有出现多个分隔符, 解析出错的局部范围:
ipv6_pattern_bits_for_ip_invalid = ipv6模式字符串中的模式位超过64位, 或不存在模式位

; core/conf/tools/args_parse/ip/ipv4_pattern.rs
parse_ipv4_pattern_err = ipv4模式字符串解析失败, 当前模式字符串为:
ipv4_pattern_local_part_err = ipv4模式字符串局部片段解析错误, 注意当前片段的首索引必须大于上一片段的尾索引, 且各项参数合法, 没有出现多个分隔符, 解析出错的局部范围:
ipv4_pattern_bits_for_ip_invalid = ipv4模式字符串中的模式位超过32位, 或不存在模式位

; core/conf/tools/args_parse/port.rs
parse_ports_range_err = 解析端口范围失败, 注意范围左边界必须小于等于右边界, 且不能出现多个分隔符(-), 当前解析失败的端口范围:

parse_u8_range_err = 解析u8数据范围失败, 注意范围左边界必须小于等于右边界, 且不能出现多个分隔符(-), 当前解析失败的u8数据范围:

; core/conf/tools/args_parse/sender.rs
send_thread_num_not_zero = 发送线程数量不能设置为0
get_thread_num_failed = 获取系统线程数量失败
rate_bandwidth_both_exist = 在发送速率和发送带宽之间只能选择一种
input_end_time_err = 输入预期结束时间出错
parse_end_time_err = 解析预期结束时间出错
parse_band_width_err = 解析带宽字符串出错, 当前带宽字符串为:
send_time_invalid = 发送线程运行时间必须大于0(发送运行时间 = 总时间 - 冷却时间)
rate_invalid = 设置的发送速率非法
tar_num_over_range = 探测目标范围超限, 目标ip数量与端口数量之积应小于2^64
source_ips_not_exist_v4 = 不存在有效ipv4源地址, 请检查网络状况或向源地址白名单中添加排除项
source_ips_not_exist_v6 = 不存在有效ipv6源地址, 请检查网络状况或向源地址白名单中添加排除项


; core/conf/tools/args_parse/target_iterator.rs
target_ips_not_exist = 目标ip地址未设置, 或未读取到任何有效ip地址
number_of_target_ipv6_addresses_out_of_range = 目标Ipv6地址数量超出范围(连续范围最大为2^(64)-1, 二进制模式位最大为64位)
targets_file_not_exist = 探测目标文件未设置
assign_threads_failed = 为ipv4和ipv6发送线程分配线程数量时发生错误
threads_num_less_than_two = 发送线程数量小于2, 混合模式需要cpu线程在3以上


; core/conf/tools/net/interface.rs
gateway_info_not_found = 无法获取网络接口对应的网关信息, 网络接口名称:
local_mac_not_found = 无法获取网络接口的本地硬件地址(MAC), 网络接口名称:

; core/conf/modules_config.rs
get_parameter_failed = 获取指定自定义参数失败, 目标参数名称:
convert_parameter_failed = 指定自定义参数类型转换失败, 目标参数名称:
mod_arg_invalid = 自定义参数非法, 请遵循 参数名称=参数值 的格式


; modules/probe_modules/probe_mod_v4.rs
v4_probe_mod_not_exist = 目标IPv4探测模块不存在, 或未激活


; modules/probe_modules/probe_mod_v6.rs
v6_probe_mod_not_exist = 目标IPv6探测模块不存在, 或未激活

; modules/output_modules/
output_mod_not_exist = 指定的输出模块不存在, 或未激活

; modules/output_modules/csv.rs
output_file_not_found = 输出模块未发现有效输出路径
open_output_file_failed = 输出模块打开目标路径失败, 目标路径:
output_flush_failed = 输出模块清空缓冲区失败, 可能导致输出的末尾部分出现异常
output_write_record_failed = 输出模块写入数据失败

; tools/net_handle/net_interface/interface.rs
interface_not_found = 未找到指定网络接口, 网络接口名称:
default_interface_not_found = 无法获取默认网络接口

; tools/net_handle/net_type/net_v4.rs
ipv4_net_invalid = ipv4网络地址掩码无效, 相关地址和掩码分别为:
parse_ipv4_net_failed = 从字符串解析ipv4网络失败, 相关ipv4网络字符串为:

; tools/net_handle/net_type/net_v6.rs
ipv6_net_invalid = ipv6网络地址掩码无效, 相关地址和掩码分别为:
parse_ipv6_net_failed = 从字符串解析ipv6网络失败, 相关ipv6网络字符串为:

; tools/others/parse.rs
parse_str_failed = 解析字符串到目标格式失败, 字符串的值为:

; cycle group
index_invalid = 乘法循环群范围索引非法, 必须保证起始索引小于等于结束索引, 且所有索引均在 1-(p-1) 的范围内
cycle_group_not_found = 未找到合适的乘法循环群
p_too_big = 乘法循环群模数过大, 无法转换到u64类型以生成ipv4的乘法循环群
get_prim_root_err = 在生成原根时发生错误
u64_to_big_num_err = 在乘法循环群的相关计算中, u64类型无法顺利转换为大数类型
big_num_to_u64_err = 在乘法循环群的相关计算中, 大数类型无法顺利转换为u64类型
u128_to_big_num_err = 在乘法循环群的相关计算中, u128类型无法顺利转换为大数类型
big_num_to_u128_err = 在乘法循环群的相关计算中, 大数类型无法顺利转换为u128类型

; tools/blocker/ipv4_blocker/ipv4_blocker.rs   tools/blocker/ipv6_blocker/ipv6_blocker.rs
open_black_white_list_file_err = 无法打开黑名单或白名单文件
read_black_white_list_file_err = 读取黑名单或白名单文件时发生错误
parse_line_err = 解析黑白名单或网络前缀条目时发生错误, 发生错误的条目为:
illegal_all_flag = 黑白名单条目出现非法全域标记, 当掩码为0时, 地址必须为0, 发生错误的条目为:

; bit_map
bitmap_u64_to_usize_err = 创建位图失败, u64类型无法安全转换到usize类型, 请注意: 本程序不支持64位以下操作系统
bitmap_get_target_failed = 获取指定索引的位图元素失败, 当前查找的索引为:
pattern_char_over_64 = ipv6模式字符串中的模式字符数量超过64位, 请注意: ipv6模式字符串中的模式字符数量最大为64
total_bits_num_over_63 = 目标范围所需要的总比特数超过63, 请减小目标地址范围或目标端口范围

; tools/file/write_to_file.rs
write_record_err = 写入记录信息(扫描配置, 探测结果)时发生错误
del_record_file_err = 删除记录文件时发生错误
input_record_option_err = 输入记录文件选项时发生错误
create_record_file_err = 创建记录文件时发生错误, 当前记录文件路径:
serialize_args_failed = 输入参数序列化失败

; modules/target_iterators/read_from_file/read_target_file.rs
open_targets_file_failed = 打开目标文件失败, 文件路径:
seek_file_failed = 目标文件指针操作失败, 字节索引 和 文件路径 分别为:
read_target_line_failed = 按行读取目标文件失败, 文件路径:
get_target_file_info_failed = 获取目标文件元数据失败, 文件路径:
target_file_index_invalid = 目标文件字节索引非法, 文件路径:
parse_targets_file_name_failed = 从目标文件名称中获取附加信息失败, 文件路径:
assign_by_num_failed = 按目标数量分配失败, 请检查目标数量是否正确

; modules/target_iterators/read_from_file/v6/ipv6_reader.rs
; modules/target_iterators/read_from_file/v4/ipv4_reader.rs
read_cur_target_failed = 读取目标文件当前行失败

; probe_modules
tar_ports_not_match_net_layer = 在发送网络层数据包时, 必须指定端口为0, 且不能输入多个目标端口


; core/sender/tools/source_ip_iter/source_ip_v4.rs
source_ips_is_null_v4 = ipv4源地址为空, 如果网络接口存在或设置过源地址, 请检查源地址是否为私有地址等无效地址

; core/sender/tools/source_ip_iter/source_ip_v6.rs
source_ips_is_null_v6 = ipv6源地址为空, 如果网络接口存在或设置过源地址, 请检查源地址是否为私有地址等无效地址

; udp
not_check_sport_parse_failed = 解析not_check_sport参数失败, 注意参数应为 true 或 false

; modules/probe_modules/tools/payload.rs
payload_args_invalid = 载荷参数非法, 请遵守以下规则:  native:目标载荷名称 或者 file:目标载荷名称 或者 bytes:载荷字节向量, 错误载荷参数:
payload_invalid = 模块载荷不符合长度等限制
payload_byte_parse_failed = 载荷解析失败, 错误载荷信息:
open_payload_file_failed = 打开载荷文件失败, 文件路径:
match_payload_failed = 未找到指定载荷或在读取过程中发生错误, 当前目标载荷名称和文件路径分别为:

; tools/file/get_path.rs
get_install_path_failed = 无法获取当前安装文件的路径
create_cur_parent_path_failed = 创建目标文件的父文件夹失败, 父文件夹:
get_tar_path_failed = 获取目标路径失败

; pmap
probe_not_use_ports = 目标探测模块不使用端口, 请选择使用端口的探测模块
sampling_pro_invalid = 采样比例非法, 注意为(0.0, 1.0]之间的浮点数
get_graph_arc_failed = 获取概率相关图原子指针失败, 请检查是否存在异常引用
tar_ports_index_err = 遍历了所有端口, 但仍要求推荐端口. 请检查代码执行逻辑
get_ip_struct_failed = 无法获取对应的ip_struct

; topo
topo_payload_len_err = 负载长度未达到要求, 且禁止了自动填充
topo_max_ttl_err = 最大ttl不得超过64

use_time_encoding_parse_failed = 解析use_time_encoding参数失败, 注意参数应为 true 或 false
print_default_ttl_parse_failed = 解析print_default_ttl参数失败, 注意参数应为 true 或 false
topo_dest_port_parse_failed = 解析topo_dest_port参数失败, 注意参数应为 u16
topo_payload_parse_failed = 解析topo_payload参数失败, 注意参数应为 string
topo_payload_allow_repeat_parse_failed = 解析topo_payload_allow_repeat参数失败, 注意参数应为 true 或 false
topo_allow_tar_network_respond_parse_failed = 解析topo_allow_tar_network_respond参数失败, 注意参数应为 true 或 false
topo_allow_port_unreach_parse_failed = 解析topo_allow_port_unreach参数失败, 注意参数应为 true 或 false

; ipv6 space tree
ipv6_space_tree_divide_dim_err = ipv6空间树划分维度应为:
ipv6_space_tree_range_err = ipv6地址分割范围非法(格式: 起始位置-结束位置), 应为1到128之间, 起始索引小于结束索引, 且为划分维度的整数倍
ipv6_space_tree_max_leaf_size_err = ipv6地址空间树聚类区域最小上限数量应大于等于2
ipv6_space_tree_no_entropy_err = ipv6地址空间树获取分裂点时无非零熵值, 请检查是否存在重复地址

ipv6_space_tree_no_exist = 暂不支持该IPv6空间树类型

get_child_move_len_err = 获取子节点分割维度时出错, 无法在父节点的分割维度中找到分裂维度
root_not_found = 获取节点队列时出现错误, 树的根节点为空
ipv6_space_tree_region_extraction_num_err = 最大区域抽取数量应小于或等于u16::MAX

; ipv6 prefix tree
ipv6_tree_max_prefix_len_err = ipv6前缀树最大前缀长度必须大于1, 小于或等于128, 且能被划分维度整除
ipv6_prefix_split_type_not_found = 分裂点选择方法不存在

; ipv6 aliased prefixes check
ipv6_alia_prefix_len_err = 设定的前缀长度不能大于等于128
ipv6_alia_rand_count_err = 每个前缀生成随机地址的数量不能超过256
prefixes_len_per_batch_over = 每批次探测前缀数量应小于2^32-1
alia_threshold_err = 别名前缀阀限过低或过高, 请确保 每前缀随机地址数量 与 别名阀限比例 的乘积大于等于1， 且小于等于 每前缀随机地址数量


[warn]
; core/conf/tools/args_parse/sender.rs
max_rate = 未指定速率或带宽, 且无法获得探测目标总量, 将按最大速率(u64::MAX)进行探测

; sender windows
batch_size_reset = 发送线程batch_size超出u32::MAX的最大值, batch_size将被强制设为u32::MAX

; help mode
no_mode = 您未指定任何模式 或 指定的模式无效, 请使用 --mode 指定模式, 或者使用 --mode_help, --probe_v4_help, --probe_v6_help, --output_help 加模块名称查看对应的帮助信息, 以下是所有受支持的模块名称(同一个模块可能有不同名称):

; tools/file/write_to_file.rs
record_file_header_not_match = 记录文件字段不匹配, 如果继续, 请输入yes, 这将删除原有记录文件, 并创建新的记录文件, 输入其它任意字符将结束程序

; modules/target_iterators/file_reader/v4/ipv4_file_reader.rs
file_line_invalid = 从文件中读取到的数据非法, 当前数据:

; tools/file/parse_context.rs
wc_l_failed = 执行 wc -l 命令获取文件行数失败, 文件路径:

; core/conf/tools/args_parse/target_iterator.rs
target_ports_not_exist = 目标端口未设置, 将使用默认目标端口(*表示全部端口):

; core/conf/tools/args_parse/sender.rs
ignored_source_ip = 已忽略无效源地址:



[info]
; ipv6 addrs gen
ipv6_space_tree_instantiation = 实例化空间树
cur_round = 当前轮次:
cur_active_num = 当前轮次活跃地址数量:

start_scan = 启动扫描, 目标数量:
cur_no_split_node_num = 当前节点总量(不包括当前分裂节点):
cur_split_node_num = 当前分裂节点总量:

topo_round = 拓扑探测轮次:
tar_num = 当前目标数量:

seeds_num = 种子数量总数:
hier_extension_ind = 层级扩展指标:

start_supplement_scan = 启动补足扫描

; ipv6 aliased prefixes check
alia_checker_recv_finished = 接收线程已停止, 发现别名前缀数量, 前缀总数, 别名地址数量(如果不允许输出别名地址, 该项将被置为0。请注意, 输入文件不要有重复地址,否则将重复计数和输出!), 总发送成功数量, 总发送失败数量, 唯一响应地址数量 分别为:


[debug]
syslog_on = 已开启终端日志


; send
send_failed = 数据包发送失败, 当前目标的地址(和端口[可能未指定])分别为:


; sender windows
send_queue_failed = 队列发送失败, 当前发送失败总数:



[trace]


[print]
syslog_off = 已关闭终端日志

; core/conf/tools/args_parse/sender.rs
input_end_time = 请输入预期结束时间, 示例如: 2023-10-26 21:15:00+08:00

; help mode
print_modes = 以下是所有受支持的 模式 名称:
print_probe_v4_modules = 以下是所有受支持的 Ipv4探测模块 名称:
print_probe_v6_modules = 以下是所有受支持的 Ipv6探测模块 名称:
print_output_modules = 以下是所有受支持的 输出模块 名称:
install_path_info = 当前程序安装路径:


; mode
send_finished = 所有发送线程已停止, 累计发送成功数量, 累计发送失败数量, 被黑名单拦截的数量 分别为:

recv_finished_with_out_of_range = 接收线程已停止, 成功接收数量, 重复以及超出目标范围的数量, 验证通过但未探测成功的数量 分别为:
recv_finished = 接收线程已停止, 成功接收数量, 重复数量, 验证通过但未探测成功的数量 分别为:
show_running_time = 运行时间:
running_time_pattern = {d} days {h} hours {m} minutes {s} seconds

recv_finished_mix = 接收线程已停止, 成功接收数量(ipv4), 重复数量(ipv4), 验证通过但未探测成功的数量(ipv4), 成功接收数量(ipv6), 重复数量(ipv6), 验证通过但未探测成功的数量(ipv6) 分别为:

; core/conf/tools/args_parse/sender.rs
forecast_completion_time = 预计完成时间:
forecast_completion_time_pattern = %Y-%m-%d %H:%M:%S

; pmap
pmap_scan_finished = pmap探测结束, 存在活跃端口的ip地址数量 和 活跃端口对总数 分别为:

; ipv6 addrs gen
ipv6_addrs_gen_finished = ipv6地址生成算法探测结束, 击中率, 总活跃目标数量, 总发送成功数量, 总发送失败数量 分别为:

; ipv6 prefix gen
ipv6_prefixes_gen_finished = ipv6活跃拓扑生成算法结束, 发现的拓扑节点地址总量 / 发送的总数据包数量, 发现的拓扑节点地址总量, 总发送成功数量, 总发送失败数量 分别为:
ipv6_prefix_tree_cur_info = 本轮次探测结束,当前 发现的拓扑节点地址总量 / 发送的总数据包数量, 发现的拓扑节点地址总量, 总发送成功数量, 总发送失败数量 分别为:


[help]
; mode
CycleV4 = ipv4乘法循环群模式, 迭代方式, 探测方法与zmap_v4保持一致

CycleV6 = ipv6乘法循环群模式, zmap的v6版

CycleV6Pattern = ipv6模式串乘法循环群模式, 支持 二进制字符串格式 和 ipv6@a-b,c 两种格式

CycleV4V6 = ipv4 ipv6混合乘法循环群模式, 支持子网, 范围, 单个地址, 不支持ipv6模式字符串

V6FileReader = 使用ipv6文件作为ipv6迭代器源, 文件中每行为一个 ipv6地址 或 ipv6地址|端口 , 也可手动定义目的端口, 此时文件中的端口将失效. 文件名可使用 目标数量: _num(\d+)_  最小ip值: _min(\d+)_  最大ip值 _max(\d+)_等标识优化扫描

V4FileReader = 使用ipv4文件作为ipv4迭代器源, 文件中每行为一个 ipv4地址 或 ipv4地址|端口 , 也可手动定义目的端口, 此时文件中的端口将失效. 文件名可使用 目标数量: _num(\d+)_  最小ip值: _min(\d+)_  最大ip值 _max(\d+)_等标识优化扫描

PmapV4 = pmap_v4版, 全网端口扫描工具, 支持ipv4范围或子网格式输入. 自定义参数为: 预扫描比例:pmap_sampling_pro, 预扫描最低探测地址数量: pmap_min_sample_num, 推荐轮次:pmap_batch_num, 预算:pmap_budget, 是否允许概率相关图迭代:pmap_allow_graph_iter, 使用哈希记录器(目标范围较大且推荐轮次较多时适用):pmap_use_hash_recorder. 注意: 该模式下将强制所有模块启动源端口检查

PmapV6 = pmap_v6版, 全网端口扫描工具, 支持ipv6模式字符串输入. 自定义参数为: 预扫描比例:pmap_sampling_pro, 预扫描最低探测地址数量: pmap_min_sample_num, 推荐轮次:pmap_batch_num, 预算:pmap_budget, 是否允许概率相关图迭代:pmap_allow_graph_iter, 使用哈希记录器(目标范围较大且推荐轮次较多时适用):pmap_use_hash_recorder. 注意: 该模式下将强制所有模块启动源端口检查

Topo4 = ipv4拓扑探测模式, 自定义参数: topo_max_ttl:最大ttl(预扫描时使用的初始ttl), topo_sub_probe_v4: 辅助预扫描模块, 一般为topo_icmp_v4, topo4_rand_bits:ipv4模式字符串随机比特位置,用随机比特替换模式字符串中的指定位置(固定部分)

Topo6 = ipv6拓扑探测模式, 自定义参数: topo_max_ttl:最大ttl(预扫描时使用的初始ttl), topo_sub_probe_v6: 辅助预扫描模块, 一般为topo_icmp_v6, topo6_rand_bits:ipv6模式字符串随机比特位置,用随机比特替换模式字符串中的指定位置(固定部分)

SpaceTree6 = 基于地址空间树的ipv6地址生成与探测算法, 自定义参数: space_tree_type: 空间树类型, budget: 总预算, batch_size:每轮次的地址数量, divide_dim:划分维度, divide_range:分割区域, max_leaf_size:聚类区域地址数量上限, no_allow_gen_seeds:不允许生成种子地址(但是可以生成输入文件中不用作种子地址的其它地址), learning_rate:学习率, region_extraction_num:区域提取数量, seeds_num:种子数量, no_allow_gen_seeds_from_file:不允许生成输入文件中的任何地址, 如果此项为真, no_allow_gen_seeds将强制为真

PrefixTree6 = ipv6前缀树, 活跃拓扑生成与探测算法

PrefixFixedTree6 = 按照固定维度进行划分的ipv6前缀树

IPv6AliasedCheck = ipv6别名前缀检测, 自定义参数: prefix_len, prefix_count, rand_addr_len, alia_ratio, output_alia_addrs

PmapFileV6 = 文件输入形式的PmapV6, 每个文件被视为一个IPv6网络

; ipv4 probe
IcmpEchoV4 = 向主机发送 ICMP_V4回显请求 的探测模块. 请使用 -a payload=file:目标负载名称 或 -a payload=bytes:[1,2,3,*] 指定载荷数组, *字符将被置换为随机值. 如果不指定载荷参数, icmp数据部分将为空

TcpSynAckScanV4 = 将TCP SYN ACK数据包发送到特定端口的ipv4探测模块.

TcpSynOptV4 = 带选项模块的ipv4 TCP SYN探测模块, 请使用 -a payload=file:目标负载名称 或 -a payload=bytes:[1,2,3,*] 指定载荷数组, *字符将被置换为随机值. 如果不指定载荷参数, 或载荷为空时将报错

TcpSynScanV4 = 将TCP SYN数据包发送到特定端口的探测模块.

UdpScanV4 = 向ipv4主机发送UDP数据包的探测模块. 请使用 -a payload=file:目标负载名称 或 -a payload=bytes:[1,2,3,*] 指定载荷数组, *字符将被置换为随机值, -a not_check_sport=true 或 false 来指定是否对源端口进行检查, 默认为true, 即不对源端口进行检查

TopoUdpV4 = ipv4拓扑udp探测模块, 自定义参数: use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息), topo_dest_port: udp目标端口, topo_payload: udp负载消息, topo_payload_allow_repeat: 允许重复负载消息至足够长度

TopoIcmpV4 = ipv4拓扑icmp探测模块, 自定义参数: use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息)

TopoTcpV4 = ipv4拓扑tcp探测模块, 自定义参数: topo_tcp_use_ack: 是否使用syn_ack, 如果为否则使用syn, use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息), topo_dest_port: tcp目标端口

; ipv6 probe
IcmpEchoV6 = 向主机发送 ICMP_V6回显请求 的探测模块.

TcpSynAckScanV6 = 将TCP SYN ACK数据包发送到特定端口的ipv6探测模块.

TcpSynOptV6 = 带选项模块的ipv6 TCP SYN探测模块, 请使用 -a payload=file:目标负载名称 或 -a payload=bytes:[1,2,3,*] 指定载荷数组, *字符将被置换为随机值. 如果不指定载荷参数, 或载荷为空时将报错

TcpSynScanV6 = 将TCP SYN数据包发送到特定端口的探测模块.

UdpScanV6 = 向ipv6主机发送UDP数据包的探测模块. 请使用 -a payload=file:目标负载名称 或 -a payload=bytes:[1,2,3,*] 指定载荷数组, *字符将被置换为随机值, -a not_check_sport=true 或 false 来指定是否对源端口进行检查, 默认为true, 即不对源端口进行检查

TopoUdpV6 = ipv6拓扑udp探测模块, 自定义参数: use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息), topo_dest_port: udp目标端口, topo_payload: udp负载消息, topo_payload_allow_repeat: 允许重复负载消息至足够长度

TopoIcmpV6 = ipv6拓扑icmp探测模块, 自定义参数: use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息)

TopoTcpV6 = ipv6拓扑tcp探测模块, 自定义参数: topo_tcp_use_ack: 是否使用syn_ack, 如果为否则使用syn, use_time_encoding: 是否使用时间戳编码, print_default_ttl: 是否打印目标主机的默认ttl, topo_allow_tar_network_respond: 是否承认目标不可达消息(允许目标网络回复目标不可达消息), topo_dest_port: tcp目标端口

CodeIcmpEchoV6 = 支持自定义编码的ipv6活跃探测模块

; modules/output_modules/csv.rs
Csv = csv输出模块, 以csv文件格式保存结果